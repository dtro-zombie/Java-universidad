package funcional;

import java.sql.Date;
import java.util.ArrayList;
import java.util.Scanner;

import Individuos.Medico;
import Individuos.Paciente;

// ver como funciona la clase calendar.

public class Turno {
	private int idturno, horainicio, hoarafin;
	private Fecha fecha;
	private Medico doctor;
	private boolean asistio;

	public Turno() {

		this.idturno = idturno;
		this.horainicio = horainicio;
		this.hoarafin = hoarafin;
		this.fecha = fecha;
		this.doctor = null;
		this.asistio = false;
	}

	public int getIdturno() {
		return idturno;
	}

	public int getHorainicio() {
		return horainicio;
	}

	public int getHoarafin() {
		return hoarafin;
	}

	public Date getFecha() {
		return fecha;
	}

	public Medico getDoctor() {
		return doctor;
	}

	public boolean isAsistio() {
		return asistio;
	}

	private void ingresarfecha()
	{
		Fecha fecha= new Fecha();
		
		Scanner Ss = new Scanner(System.in);
		
		do{
		System.out.println("ingrese dia");
		int Ingreso = Ss.nextInt();
		fecha.setDia(Ingreso);
		
		System.out.println("ingrese mes");
		Ingreso = Ss.nextInt();
		fecha.setMes(Ingreso);
		
		System.out.println("ingrese anio");
		Ingreso = Ss.nextInt();
		fecha.setAnio(Ingreso);
		
		
		}while(fecha.controlarfecha()&&fecha.controlarfecha2()!= false);
		
		
		this.fecha=fecha;
		
		
		
		
	}
	
	private void Ingresaridturno() {
		System.out.println("ingrese id del turno");
		Scanner Ss = new Scanner(System.in);
		int Ingreso = Ss.nextInt();
		this.idturno = Ingreso;
	}
	
	private void ingresarhoradeiniciofin()
	{
		System.out.println("hora de inicio");
		Scanner Ss = new Scanner(System.in);
		int Ingreso = Ss.nextInt();
		this.horainicio = Ingreso;
		
		System.out.println("hora de fin");
		Ingreso = Ss.nextInt();
		this.hoarafin = Ingreso;
	
	
	}
	
	
	
	
	
	

	public void Altaturno(ArrayList<Paciente> listapaciente) {

		Paciente paciente1 = new Paciente();
		Turno turno = new Turno();

		System.out.println("igrese el id del paciente que quiere un turno");
		Scanner Sc = new Scanner(System.in);
		int idpaciente = Sc.nextInt();

		if (paciente1.Buscarpaciente(idpaciente, listapaciente)) {

			paciente1 = paciente1.Devolverpaciente(idpaciente, listapaciente);

			listapaciente.remove(paciente1);

			// aca pasa toda la carga
			turno.Ingresaridturno();

			paciente1.Ingresarturnos(turno);

			listapaciente.add(paciente1);

			System.out.println("Turno generado");
		} else {
			System.out.println("Al paciente que le quiere generar un turno, ¡no existe!");
		}

	}

	public void Bajaturno(int idturno,int idpaciente,ArrayList<Paciente> listapacientes) 
	{
		
		Turno turno = new Turno();
		Paciente paciente =new Paciente();
		
		paciente=paciente.Devolverpaciente(idpaciente, listapacientes);
		
		if (Buscarturno(idturno, idpaciente, listapacientes)) {

			turno = this.Obtenerturno(idturno,idpaciente, listapacientes);

			listapacientes.remove(paciente);
			
			paciente.getTurno().remove(turno);
			
			listapacientes.add(paciente);

		}

		else {
			System.out.println("El paciente que deseea remover no existe");
		}
		
		
	}

	public void Modificarturno(int idturno, int idpaciente, ArrayList<Paciente> listapacientes) 
	{
		Paciente paciente = new Paciente();
		Turno turno = new Turno();

		if (Buscarturno(idturno,idpaciente, listapacientes)) {

			turno = this.Obtenerturno(idturno,idpaciente, listapacientes);
			paciente=paciente.Devolverpaciente(idpaciente, listapacientes);
			
			listapacientes.remove(paciente);
			paciente.getTurno().remove(turno);
			
			
			
			Scanner Sc = new Scanner(System.in);
			int opcion = 0;

			do {

				System.out.println("opcion 1: modificar id de turno");
				
				opcion = Sc.nextInt();
				switch (opcion) {

				case 1:
					turno.Ingresaridturno();
					break;
				
				}
				
				
			} while (opcion != 0);
			
			
			paciente.Ingresarturnos(turno);
			listapacientes.add(paciente);

			System.out.println("turno modificado con exito");

		}

		else {
			System.out.println("no existe, primero registre al paciente o el turno");
		}

		
		
		
	}

	public Turno Obtenerturno(int idturno, int idpaciente, ArrayList<Paciente> listapacientes) {
		for (Paciente e : listapacientes) {
			if (e.getIdpaciente() == idpaciente) {
				for (Turno t : e.getTurno()) {
					if (t.idturno == idturno) {
						return t;
					}
				}
			}

		}
		return null;
	}

	public boolean Buscarturno(int idturno, int idpaciente, ArrayList<Paciente> listapacientes) {

		for (Paciente e : listapacientes) {
			if (e.getIdpaciente() == idpaciente) {
				for (Turno t : e.getTurno()) {
					if (t.idturno == idturno) {
						return true;
					}
				}
			}

		}

		return false;

	}

}